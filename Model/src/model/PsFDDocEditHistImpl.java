package model;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Feb 10 12:26:59 EST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PsFDDocEditHistImpl
  extends EntityImpl
{
  /**
   * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
   */
  public enum AttributesEnum
  {
    ProjId,
    DocEditId,
    DocVersion,
    EditDate,
    AddModifications,
    Cr,
    PreparedBy,
    PsFDProjects;
    private static AttributesEnum[] vals = null;
    private static final int firstIndex = 0;

    public int index()
    {
      return AttributesEnum.firstIndex() + ordinal();
    }

    public static final int firstIndex()
    {
      return firstIndex;
    }

    public static int count()
    {
      return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
    }

    public static final AttributesEnum[] staticValues()
    {
      if (vals == null)
      {
        vals = AttributesEnum.values();
      }
      return vals;
    }
  }

  public static final int PROJID = AttributesEnum.ProjId.index();
  public static final int DOCEDITID = AttributesEnum.DocEditId.index();
  public static final int DOCVERSION = AttributesEnum.DocVersion.index();
  public static final int EDITDATE = AttributesEnum.EditDate.index();
  public static final int ADDMODIFICATIONS = AttributesEnum.AddModifications.index();
  public static final int CR = AttributesEnum.Cr.index();
  public static final int PREPAREDBY = AttributesEnum.PreparedBy.index();
  public static final int PSFDPROJECTS = AttributesEnum.PsFDProjects.index();

  /**
   * This is the default constructor (do not remove).
   */
  public PsFDDocEditHistImpl()
  {
  }

  /**
   * @return the definition object for this instance class.
   */
  public static synchronized EntityDefImpl getDefinitionObject()
  {
    return EntityDefImpl.findDefObject("model.PsFDDocEditHist");
  }

  /**
   * Gets the attribute value for ProjId, using the alias name ProjId.
   * @return the value of ProjId
   */
  public Number getProjId()
  {
    return (Number) getAttributeInternal(PROJID);
  }

  /**
   * Sets <code>value</code> as the attribute value for ProjId.
   * @param value value to set the ProjId
   */
  public void setProjId(Number value)
  {
    setAttributeInternal(PROJID, value);
  }

  /**
   * Gets the attribute value for DocEditId, using the alias name DocEditId.
   * @return the value of DocEditId
   */
  public Number getDocEditId()
  {
    return (Number) getAttributeInternal(DOCEDITID);
  }

  /**
   * Sets <code>value</code> as the attribute value for DocEditId.
   * @param value value to set the DocEditId
   */
  public void setDocEditId(Number value)
  {
    setAttributeInternal(DOCEDITID, value);
  }

  /**
   * Gets the attribute value for DocVersion, using the alias name DocVersion.
   * @return the value of DocVersion
   */
  public BigDecimal getDocVersion()
  {
    return (BigDecimal) getAttributeInternal(DOCVERSION);
  }

  /**
   * Sets <code>value</code> as the attribute value for DocVersion.
   * @param value value to set the DocVersion
   */
  public void setDocVersion(BigDecimal value)
  {
    setAttributeInternal(DOCVERSION, value);
  }

  /**
   * Gets the attribute value for EditDate, using the alias name EditDate.
   * @return the value of EditDate
   */
  public Timestamp getEditDate()
  {
    return (Timestamp) getAttributeInternal(EDITDATE);
  }

  /**
   * Sets <code>value</code> as the attribute value for EditDate.
   * @param value value to set the EditDate
   */
  public void setEditDate(Timestamp value)
  {
    setAttributeInternal(EDITDATE, value);
  }

  /**
   * Gets the attribute value for AddModifications, using the alias name AddModifications.
   * @return the value of AddModifications
   */
  public String getAddModifications()
  {
    return (String) getAttributeInternal(ADDMODIFICATIONS);
  }

  /**
   * Sets <code>value</code> as the attribute value for AddModifications.
   * @param value value to set the AddModifications
   */
  public void setAddModifications(String value)
  {
    setAttributeInternal(ADDMODIFICATIONS, value);
  }

  /**
   * Gets the attribute value for Cr, using the alias name Cr.
   * @return the value of Cr
   */
  public String getCr()
  {
    return (String) getAttributeInternal(CR);
  }

  /**
   * Sets <code>value</code> as the attribute value for Cr.
   * @param value value to set the Cr
   */
  public void setCr(String value)
  {
    setAttributeInternal(CR, value);
  }

  /**
   * Gets the attribute value for PreparedBy, using the alias name PreparedBy.
   * @return the value of PreparedBy
   */
  public String getPreparedBy()
  {
    return (String) getAttributeInternal(PREPAREDBY);
  }

  /**
   * Sets <code>value</code> as the attribute value for PreparedBy.
   * @param value value to set the PreparedBy
   */
  public void setPreparedBy(String value)
  {
    setAttributeInternal(PREPAREDBY, value);
  }

  /**
   * @return the associated entity PsFDProjectsImpl.
   */
  public PsFDProjectsImpl getPsFDProjects()
  {
    return (PsFDProjectsImpl) getAttributeInternal(PSFDPROJECTS);
  }

  /**
   * Sets <code>value</code> as the associated entity PsFDProjectsImpl.
   */
  public void setPsFDProjects(PsFDProjectsImpl value)
  {
    setAttributeInternal(PSFDPROJECTS, value);
  }


  /**
   * @param docEditId key constituent

   * @return a Key object based on given key constituents.
   */
  public static Key createPrimaryKey(Number docEditId)
  {
    return new Key(new Object[] { docEditId });
  }

  /**
   * Add attribute defaulting logic in this method.
   * @param attributeList list of attribute names/values to initialize the row
   */
  protected void create(AttributeList attributeList)
  {
    super.create(attributeList);
    setDocEditId(getNextSequenceVal("DOC_EDIT_ID_SEQ"));
  }
  protected Number getNextSequenceVal(String sequenceName)
  {
    SequenceImpl s = new SequenceImpl(sequenceName, getDBTransaction());
    return s.getSequenceNumber();
  }
}

